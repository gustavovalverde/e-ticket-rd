---
description:
globs: **/components/**/*.ts,**/components/**/*.tsx,**/components/**/*.js,**/components/**/*.jsx,**/components/ui/**,**/forms/**/*.ts,**/forms/**/*.tsx,**/sections/**/*.ts,**/sections/**/*.tsx,**/layouts/**/*.ts,**/layouts/**/*.tsx,**/*.css,**/*.scss,**/styles/**,**/globals.css,components.json,tailwind.config.*,postcss.config.*,**/schemas/**/*.ts,**/lib/validations/**/*.ts,**/lib/utils.ts,**/lib/cn.ts,package.json
alwaysApply: false
---
# UI Patterns & Component Standards

This project uses a standardized approach to form components and UI patterns for the Dominican Republic E-Ticket system.

## Form Components Architecture

### Core Philosophy
- **TanStack Form Integration**: All forms use TanStack Form for complex government form requirements
- **Shadcn/ui Enhancement**: TanStack form components enhanced with shadcn/ui best practices
- **Centralized Requirements**: Single source of truth for field requirements in [form-utils.ts](mdc:src/lib/utils/form-utils.ts)
- **Automatic Indicators**: Required field indicators and error styling applied automatically

### Standard Form Components

#### FormField Component
**Usage**: Standard text/email/password inputs
```tsx
<form.AppField name="contactInfo.email">
  {(field: AnyFieldApi) => (
    <FormField
      field={field}
      label="Email Address"
      type="email"
      placeholder="Enter your email address"
      description="We'll send your e-ticket confirmation here"
    />
  )}
</form.AppField>
```

**Features**:
- Automatic required field detection via [getFieldRequirement()](mdc:src/lib/utils/form-utils.ts)
- Red asterisk (*) for required fields
- Enhanced error styling with red borders
- Proper ARIA relationships and accessibility

#### FormRadioGroup Component
**Usage**: Radio button selections with icons and descriptions
```tsx
<form.AppField name="groupTravel.travelingAlone">
  {(field: AnyFieldApi) => (
    <FormRadioGroup
      field={booleanFieldAdapter(field, { trueValue: "solo", falseValue: "group" })}
      options={[
        {
          value: "solo",
          id: "solo",
          label: "Traveling Solo",
          description: "Just me",
          icon: <User className="h-6 w-6" />,
        },
        {
          value: "group",
          id: "group",
          label: "Group Travel",
          description: "With family or friends",
          icon: <Users className="h-6 w-6" />,
        }
      ]}
      layout="grid"
      columns="2"
    />
  )}
</form.AppField>
```

#### PhoneField Component
**Usage**: Phone number input with country code selection
```tsx
<form.AppField name="contactInfo.phone.number">
  {(numberField: AnyFieldApi) => (
    <form.AppField name="contactInfo.phone.countryCode">
      {(countryCodeField: AnyFieldApi) => (
        <PhoneField
          numberField={numberField}
          countryCodeField={countryCodeField}
        />
      )}
    </form.AppField>
  )}
</form.AppField>
```

### Required Field System

#### Centralized Configuration
All field requirements defined in [FIELD_REQUIREMENTS](mdc:src/lib/utils/form-utils.ts):

```typescript
export const FIELD_REQUIREMENTS: Record<string, boolean> = {
  // Contact Information - Required for e-ticket delivery
  "contactInfo.email": true,
  "contactInfo.phone.number": true,

  // Personal Information - Government required
  "personalInfo.firstName": true,
  "personalInfo.lastName": true,
  "personalInfo.passportNumber": true,
  "personalInfo.nationality": true,
  "personalInfo.sex": true,
  "personalInfo.dateOfBirth": true,

  // Travel Information - Required for processing
  "flightInfo.travelDirection": true,
  "flightInfo.airline": true,
  "flightInfo.flightNumber": true,
  "flightInfo.departureDate": true,
  "flightInfo.departurePort": true,
  "flightInfo.arrivalPort": true,
  "flightInfo.hasStops": true,

  // Group Travel
  "groupTravel.travelingAlone": true,

  // Address Information (moved to traveler records)
  "addressInheritance.individualAddress.permanentAddress": true,
  "addressInheritance.individualAddress.residenceCountry": true,
  "addressInheritance.individualAddress.city": true,

  // Customs Declaration - Legal requirement
  "customsDeclaration.carryingMoney": true,
  "customsDeclaration.carryingBiologicalMaterials": true,
  "customsDeclaration.carryingTaxableGoods": true,
};
```

#### Automatic Detection
Components automatically detect required status:
```typescript
const isRequired = getFieldRequirement(field.name);
```

### Boolean Field Adapters

For RadioGroup components that need boolean values:

```typescript
function booleanFieldAdapter(
  field: AnyFieldApi,
  config: { trueValue: string; falseValue: string }
) {
  return {
    ...field,
    state: {
      ...field.state,
      value: field.state.value === true ? config.trueValue :
             field.state.value === false ? config.falseValue : ""
    },
    handleChange: (value: string) => {
      field.handleChange(value === config.trueValue);
    }
  };
}
```

### Error Styling Standards

#### Automatic Error Styling
- **Field Borders**: Red border via `aria-invalid:border-destructive`
- **Error Messages**: Red text with `text-destructive` and `role="alert"`
- **Focus States**: Red ring via `focus-visible:ring-destructive/20`

#### WCAG Compliance
- Proper ARIA relationships (`aria-invalid`, `aria-describedby`)
- Error messages with `role="alert"` for screen readers
- High contrast error colors meeting WCAG AA standards

### Component Imports

#### Standard Form Components
```typescript
import { FormField } from "@/components/forms/form-field";
import { FormRadioGroup } from "@/components/forms/form-radio-group";
import { PhoneField } from "@/components/ui/phone-field";
```

#### TanStack Form Enhanced Components
```typescript
import {
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
} from "@/components/ui/tanstack-form";
```

#### Utility Functions
```typescript
import { getFieldRequirement } from "@/lib/utils/form-utils";
import { cn } from "@/lib/utils";
```

### Design System Integration

#### Shadcn/ui Classes
- `text-destructive` - Error text color
- `border-destructive` - Error border color
- `bg-muted/50` - Hover backgrounds
- `text-muted-foreground` - Secondary text

#### Icons and Visual Elements
- Lucide React icons for consistency
- Icon containers with appropriate sizing (`h-6 w-6`, `h-12 w-12`)
- Color-coded icons for different states (green for positive, red for negative)

### Form Step Organization

#### Current Step Structure
1. **Contact Information**: Preferred name, email (required), phone (required)
2. **Travel Information**: Travel direction, airline, flight details, route/stops
3. **Group Travel**: Solo vs group selection
4. **General Information**: Address, purpose of trip
5. **Personal Information**: Identity and passport details
6. **Customs Declaration**: Money, biological materials, taxable goods

### Validation Integration

#### TanStack Form Validators
```typescript
validators={{
  onChange: ({ value }) => {
    if (!value) return "Email is required for e-ticket delivery";
    return emailSchema.safeParse(value).success
      ? undefined
      : "Please enter a valid email address";
  }
}}
```

#### Schema Validation
Uses Zod schemas from [validation.ts](mdc:src/lib/schemas/validation.ts) for consistent validation rules.

This standardized approach ensures consistency across all form components while maintaining accessibility, proper error handling, and a cohesive user experience.
