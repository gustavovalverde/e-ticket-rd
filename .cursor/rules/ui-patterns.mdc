---
description:
globs: **/components/**/*.ts,**/components/**/*.tsx,**/components/**/*.js,**/components/**/*.jsx,**/components/ui/**,**/forms/**/*.ts,**/forms/**/*.tsx,**/sections/**/*.ts,**/sections/**/*.tsx,**/layouts/**/*.ts,**/layouts/**/*.tsx,**/*.css,**/*.scss,**/styles/**,**/globals.css,components.json,tailwind.config.*,postcss.config.*,**/schemas/**/*.ts,**/lib/validations/**/*.ts,**/lib/utils.ts,**/lib/cn.ts,package.json
alwaysApply: false
---
# UI Component & Form Patterns

## Shadcn/ui Integration

### Component Import Pattern
```typescript
// Import components from the project's components directory
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
```

### Atomic Design Structure
```
src/components/
├── ui/              # Shadcn/ui components (atoms)
│   ├── button.tsx
│   ├── input.tsx
│   ├── card.tsx
│   └── form.tsx
├── forms/           # Form-specific components (molecules)
│   ├── personal-info-form.tsx
│   ├── travel-details-form.tsx
│   └── passport-scanner.tsx
├── sections/        # Page sections (organisms)
│   ├── form-wizard.tsx
│   ├── confirmation-panel.tsx
│   └── qr-code-display.tsx
└── layouts/         # Layout components (templates)
    ├── form-layout.tsx
    └── confirmation-layout.tsx
```

## Smart Form Implementation

### Multi-Step Form Wizard Pattern
```typescript
interface FormStep {
  id: string;
  title: string;
  component: React.ComponentType<FormStepProps>;
  validation: z.ZodSchema;
  condition?: (data: FormData) => boolean;
}

const FORM_STEPS: FormStep[] = [
  {
    id: 'personal-info',
    title: 'Personal Information',
    component: PersonalInfoStep,
    validation: personalInfoSchema,
  },
  {
    id: 'travel-details',
    title: 'Travel Details',
    component: TravelDetailsStep,
    validation: travelDetailsSchema,
  },
  {
    id: 'customs-declaration',
    title: 'Customs Declaration',
    component: CustomsDeclarationStep,
    validation: customsSchema,
    condition: (data) => data.travelPurpose === 'business',
  },
];
```

### Conditional Form Fields
```typescript
function CustomsDeclarationStep({ form }: FormStepProps) {
  return (
    <div className="space-y-6">
      <form.Field
        name="carryingCommercialGoods"
        children={(field) => (
          <FormItem>
            <FormLabel>Are you carrying commercial goods?</FormLabel>
            <FormControl>
              <RadioGroup
                value={field.state.value}
                onValueChange={field.handleChange}
                className="flex flex-col space-y-2"
              >
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="yes" id="goods-yes" />
                  <Label htmlFor="goods-yes">Yes</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="no" id="goods-no" />
                  <Label htmlFor="goods-no">No</Label>
                </div>
              </RadioGroup>
            </FormControl>
            {field.state.meta.errors.length > 0 && (
              <FormMessage>{field.state.meta.errors[0]}</FormMessage>
            )}
          </FormItem>
        )}
      />

      {/* Conditional fields based on carrying goods */}
      <form.Subscribe
        selector={(state) => state.values.carryingCommercialGoods}
        children={(carryingGoods) =>
          carryingGoods === 'yes' && (
            <div className="space-y-4 pl-4 border-l-2 border-blue-200">
              <form.Field
                name="goodsValue"
                children={(field) => (
                  <FormItem>
                    <FormLabel>Total value of goods (USD)</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        placeholder="0.00"
                        value={field.state.value}
                        onChange={(e) => field.handleChange(parseFloat(e.target.value) || 0)}
                        onBlur={field.handleBlur}
                      />
                    </FormControl>
                    {field.state.meta.errors.length > 0 && (
                      <FormMessage>{field.state.meta.errors[0]}</FormMessage>
                    )}
                  </FormItem>
                )}
              />
            </div>
          )
        }
      />
    </div>
  );
}
```

## Form Validation with Zod

### Schema Definition Pattern
```typescript
import { z } from 'zod';

const personalInfoSchema = z.object({
  firstName: z.string()
    .min(1, 'First name is required')
    .max(50, 'First name must be less than 50 characters'),
  lastName: z.string()
    .min(1, 'Last name is required')
    .max(50, 'Last name must be less than 50 characters'),
  dateOfBirth: z.string()
    .refine((date) => {
      const birthDate = new Date(date);
      const today = new Date();
      const age = today.getFullYear() - birthDate.getFullYear();
      return age >= 0 && age <= 120;
    }, 'Please enter a valid date of birth'),
  passportNumber: z.string()
    .min(6, 'Passport number must be at least 6 characters')
    .max(20, 'Passport number must be less than 20 characters')
    .regex(/^[A-Z0-9]+$/, 'Passport number must contain only letters and numbers'),
});

type PersonalInfoForm = z.infer<typeof personalInfoSchema>;
```

### TanStack Form Integration
```typescript
import { useForm } from '@tanstack/react-form';
import { zodValidator } from '@tanstack/zod-form-adapter';

function PersonalInfoStep() {
  const form = useForm({
    defaultValues: {
      firstName: '',
      lastName: '',
      dateOfBirth: '',
      passportNumber: '',
    },
    onSubmit: async ({ value }) => {
      try {
        // Save data or proceed to next step
        await saveFormData(value);
      } catch (error) {
        toast.error('Failed to save information. Please try again.');
      }
    },
    validators: {
      onChange: personalInfoSchema,
    },
    validatorAdapter: zodValidator,
  });

  return (
    <form
      onSubmit={(e) => {
        e.preventDefault();
        e.stopPropagation();
        form.handleSubmit();
      }}
      className="space-y-6"
    >
      <form.Field
        name="firstName"
        children={(field) => (
          <FormItem>
            <FormLabel htmlFor={field.name}>First Name</FormLabel>
            <FormControl>
              <Input
                id={field.name}
                name={field.name}
                value={field.state.value}
                onBlur={field.handleBlur}
                onChange={(e) => field.handleChange(e.target.value)}
              />
            </FormControl>
            {field.state.meta.errors.length > 0 && (
              <FormMessage>{field.state.meta.errors[0]}</FormMessage>
            )}
          </FormItem>
        )}
      />

      <form.Field
        name="lastName"
        children={(field) => (
          <FormItem>
            <FormLabel htmlFor={field.name}>Last Name</FormLabel>
            <FormControl>
              <Input
                id={field.name}
                name={field.name}
                value={field.state.value}
                onBlur={field.handleBlur}
                onChange={(e) => field.handleChange(e.target.value)}
              />
            </FormControl>
            {field.state.meta.errors.length > 0 && (
              <FormMessage>{field.state.meta.errors[0]}</FormMessage>
            )}
          </FormItem>
        )}
      />

      <form.Field
        name="passportNumber"
        children={(field) => (
          <FormItem>
            <FormLabel htmlFor={field.name}>Passport Number</FormLabel>
            <FormControl>
              <Input
                id={field.name}
                name={field.name}
                value={field.state.value}
                onBlur={field.handleBlur}
                onChange={(e) => field.handleChange(e.target.value)}
              />
            </FormControl>
            {field.state.meta.errors.length > 0 && (
              <FormMessage>{field.state.meta.errors[0]}</FormMessage>
            )}
          </FormItem>
        )}
      />

      <Button type="submit" disabled={!form.state.canSubmit}>
        Continue
      </Button>
    </form>
  );
}
```

## Accessibility Patterns

### Keyboard Navigation
```typescript
function FormWizard() {
  const [currentStep, setCurrentStep] = useState(0);

  // Handle keyboard navigation
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.altKey) {
        switch (event.key) {
          case 'ArrowLeft':
            event.preventDefault();
            goToPreviousStep();
            break;
          case 'ArrowRight':
            event.preventDefault();
            goToNextStep();
            break;
        }
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [currentStep]);
}
```

### Screen Reader Support
```typescript
function FormStep({ title, isActive, stepNumber, totalSteps }) {
  return (
    <div
      role="tabpanel"
      aria-labelledby={`step-${stepNumber}-tab`}
      aria-hidden={!isActive}
      tabIndex={isActive ? 0 : -1}
    >
      <h2
        id={`step-${stepNumber}-heading`}
        className="sr-only"
      >
        Step {stepNumber} of {totalSteps}: {title}
      </h2>

      {/* Form content */}
    </div>
  );
}
```

### ARIA Labels and Descriptions
```typescript
function FormField({ name, label, description, required, error }) {
  const fieldId = `field-${name}`;
  const descriptionId = `${fieldId}-description`;
  const errorId = `${fieldId}-error`;

  return (
    <div className="space-y-2">
      <Label
        htmlFor={fieldId}
        className={required ? "after:content-['*'] after:ml-0.5 after:text-red-500" : ""}
      >
        {label}
      </Label>

      {description && (
        <p id={descriptionId} className="text-sm text-gray-600">
          {description}
        </p>
      )}

      <Input
        id={fieldId}
        name={name}
        aria-describedby={`${description ? descriptionId : ''} ${error ? errorId : ''}`.trim()}
        aria-invalid={error ? 'true' : 'false'}
        aria-required={required}
      />

      {error && (
        <p
          id={errorId}
          role="alert"
          className="text-sm text-red-600"
        >
          {error}
        </p>
      )}
    </div>
  );
}
```

## Mobile-First Responsive Design

### Responsive Form Layout
```typescript
function FormLayout({ children, title }) {
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-6 max-w-2xl">
        <Card className="w-full">
          <CardHeader className="text-center pb-6">
            <CardTitle className="text-2xl font-bold text-gray-900">
              {title}
            </CardTitle>
          </CardHeader>
          <CardContent className="px-6 pb-8">
            {children}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
```

### Mobile-Optimized Form Controls
```typescript
function MobileOptimizedInput({ type, ...props }) {
  // Optimize input types for mobile keyboards
  const mobileInputType = {
    'passport': 'text',
    'phone': 'tel',
    'email': 'email',
    'date': 'date',
    'number': 'numeric',
  }[type] || type;

  return (
    <Input
      {...props}
      type={mobileInputType}
      className="text-base" // Prevent zoom on iOS
      autoComplete={getAutoCompleteValue(props.name)}
    />
  );
}
```

## Progress Indication

### Step Progress Component
```typescript
function StepProgress({ currentStep, totalSteps, steps }) {
  return (
    <nav aria-label="Form progress" className="mb-8">
      <ol className="flex items-center justify-between w-full">
        {steps.map((step, index) => {
          const isActive = index === currentStep;
          const isCompleted = index < currentStep;

          return (
            <li key={step.id} className="flex items-center">
              <div
                className={`
                  flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium
                  ${isActive ? 'bg-blue-600 text-white' : ''}
                  ${isCompleted ? 'bg-green-600 text-white' : ''}
                  ${!isActive && !isCompleted ? 'bg-gray-200 text-gray-600' : ''}
                `}
                aria-current={isActive ? 'step' : undefined}
              >
                {isCompleted ? (
                  <CheckIcon className="w-4 h-4" />
                ) : (
                  index + 1
                )}
              </div>

              <span className="ml-2 text-sm font-medium text-gray-900 hidden sm:inline">
                {step.title}
              </span>

              {index < steps.length - 1 && (
                <ChevronRightIcon className="w-5 h-5 text-gray-400 mx-2" />
              )}
            </li>
          );
        })}
      </ol>
    </nav>
  );
}
```

## QR Code & Confirmation Patterns

### QR Code Display Component
```typescript
import QRCode from 'qrcode.react';

function QRCodeDisplay({ data, size = 200 }) {
  return (
    <div className="flex flex-col items-center space-y-4">
      <div className="p-4 bg-white rounded-lg shadow-sm border">
        <QRCode
          value={data}
          size={size}
          level="M"
          includeMargin={true}
          renderAs="svg"
        />
      </div>

      <div className="text-center">
        <p className="text-sm text-gray-600 mb-2">
          Show this code to immigration officials
        </p>
        <Button
          variant="outline"
          onClick={() => downloadQRCode(data)}
          className="text-sm"
        >
          Download QR Code
        </Button>
      </div>
    </div>
  );
}
```
