---
description:
globs: **/*.ts,**/*.tsx,**/*.js,**/*.jsx,package.json,tsconfig.json,eslint.config.*,components.json,postcss.config.*,tailwind.config.*,next.config.*,**/*.css,**/*.scss,**/globals.css,**/components/**,**/ui/**,**/app/**,**/lib/**,**/api/**,docs/decisions/**/*.md,docs/product/development-plan.md
alwaysApply: false
---
# Technology Stack & Dependencies

## Frontend Stack

### Core Framework
- **Next.js 15.3.3 App Router** - Server Components, routing, and layouts
- **TypeScript 5** - Type safety with consistent type imports
- **React 19.1.0** - Component library and hooks
- **Node.js 22+** - Runtime environment

### UI & Styling
- **Shadcn/ui** - Accessible components built on Tailwind CSS and Radix UI
  - "new-york" style configuration
  - React Server Components support (`rsc: true`)
  - CSS variables for theming (`cssVariables: true`)
- **Tailwind CSS v4** - Utility-first CSS with new `@import "tailwindcss"` syntax
- **Radix UI** - Headless, accessible UI primitives
- **Lucide React v0.513.0** - Icon library
- **tw-animate-css v1.3.4** - Animation utilities for Tailwind
- **clsx v2.1.1** - Conditional className utility
- **tailwind-merge v3.3.0** - Merge Tailwind classes without conflicts

### Form Management & Validation
- **TanStack Form v1.12.2** - Form validation with field dependencies and async validation (selected via ADR 001)
  - **Pragmatic TypeScript approach**: Use `AnyFieldApi` from `@tanstack/react-form` for field typing instead of complex generics
  - **Simplified type safety**: Use `any` for form instances due to TanStack Form's complex typing (9-19 type arguments required)
  - **Multi-step architecture**: Separate form step components from container components for better separation of concerns
  - **Field pattern**: `form.AppField` with `AnyFieldApi` typing for consistent field handling
- **Zod v3.25.56** - Schema validation for client and server
- **class-variance-authority v0.7.1** - Component variant management

### Internationalization
- **next-intl v4.1.0** - i18n for Next.js App Router

### State Management
- **React Context** - Global state (theme, language)
- **Built-in React state** - useState, useReducer for component state
- Note: Zustand mentioned in development plan but not yet implemented

## Development Tools & Code Quality

### Linting & Formatting
- **ESLint v9** with configuration:
  - **@typescript-eslint** - TypeScript linting rules
  - **eslint-plugin-jsx-a11y v6.10.2** - Accessibility linting (required for government projects)
  - **eslint-plugin-security v3.0.1** - Security vulnerability detection
  - **eslint-plugin-sonarjs v3.0.2** - Code quality and bug detection
  - **eslint-plugin-react v7.37.5** - React rules
  - **eslint-plugin-react-hooks v5.2.0** - React Hooks rules
  - **eslint-plugin-import v2.31.0** - Import/export organization
- **Prettier v3.5.3** - Code formatting with Tailwind plugin
- **Stylelint v16.20.0** - CSS linting
- **Markdownlint** - Documentation linting

### Development Workflow
- **Husky v9.1.7** - Git hooks management
- **lint-staged v16.1.0** - Pre-commit linting
- **pnpm 10.10.0** - Package manager
- **Turbopack** - Fast bundler for development (`next dev --turbopack`)

## Backend & API Layer

### Current Implementation
- **Next.js API Routes** - Unified codebase for prototype development
- **Server Components** - Next.js App Router for server-side rendering

### Future Considerations (TBD)
- **Database** - To be determined based on requirements
- **Authentication** - To be determined based on requirements
- **Email Service** - SendGrid/Resend mentioned in development plan (not yet implemented)

## Specialized Features (Future)

### OCR & Document Processing
- **Client-side OCR** - Tesseract.js for passport MRZ reading (prototype phase)
- **QR Code Generation** - qrcode.react for confirmations
- **Production OCR** - Native mobile SDKs (Google ML Kit, Apple Vision) for production mobile apps

## Deployment & Infrastructure

### Current Setup
- **Vercel** - Next.js deployment platform
- **Git** - Version control with automation workflows

### Development Environment
- **PostCSS** - CSS processing with `@tailwindcss/postcss` plugin
- **TypeScript path aliases** - `@/*` pointing to `src/*`
- **ES2017 target** - JavaScript features support

## Architecture Patterns

### Directory Structure (Next.js App Router)
```
src/
├── app/           # App Router pages, layouts, and API routes
│   ├── globals.css # Tailwind v4 configuration and CSS variables
│   └── layout.tsx  # Root layout with font configuration
├── components/    # Reusable UI components
│   └── ui/        # Shadcn/ui components (Button, Card, Navigation, etc.)
└── lib/          # Utilities and shared logic
    └── utils.ts   # Utility functions (cn for className merging)
```

### Component Organization
- **Atomic Design principles** - Atoms, Molecules, Organisms, Templates, Pages
- **Server Components first** - SSR for non-interactive UI (performance)
- **Client Components** - Used sparingly for interactive elements (`'use client'` directive)
- **Accessibility-first** - WCAG 2.1/2.2 AA compliance enforced through linting

### Configuration Files
- [components.json](mdc:components.json) - Shadcn/ui configuration
- [package.json](mdc:package.json) - Dependencies and scripts
- [eslint.config.mjs](mdc:eslint.config.mjs) - Linting rules
- [tsconfig.json](mdc:tsconfig.json) - TypeScript configuration
- [postcss.config.mjs](mdc:postcss.config.mjs) - Tailwind v4 setup

### Decision Documents
- [001-form-library-selection.md](mdc:docs/decisions/core/001-form-library-selection.md) - TanStack Form adoption rationale
- [development-plan.md](mdc:docs/product/development-plan.md) - Technical strategy
